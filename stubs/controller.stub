<?php

declare(strict_types=1);

namespace App\Controllers;

use App\Traits\RouteParamsTrait;
use App\Traits\ValidatesRequests;
use Psr\Http\Message\RequestInterface as Request;
use Psr\Http\Message\ResponseInterface as Response;
use App\Http\Requests\{{controllerName}}\Create{{controllerName}}Request;
use App\Http\Requests\{{controllerName}}\Update{{controllerName}}Request;
use App\DTO\{{controllerName}}\Create{{controllerName}}DTO;
use App\DTO\{{controllerName}}\Update{{controllerName}}DTO;
use App\Actions\{{controllerName}}\Create{{controllerName}}Action;
use App\Actions\{{controllerName}}\Delete{{controllerName}}Action;
use App\Actions\{{controllerName}}\Get{{controllerName}}Action;
use App\Actions\{{controllerName}}\List{{controllerName}}Action;
use App\Actions\{{controllerName}}\Update{{controllerName}}Action;

class {{controllerName}}Controller
{
    use RouteParamsTrait;
    use ValidatesRequests;

    public function __construct(
        private readonly Create{{controllerName}}Action $createAction,
        private readonly Update{{controllerName}}Action $updateAction,
        private readonly Delete{{controllerName}}Action $deleteAction,
        private readonly Get{{controllerName}}Action $getAction,
        private readonly List{{controllerName}}Action $listAction,
    ) {
    }

    public function index(Request $request, Response $response): Response
    {
        $items = $this->listAction->execute();

        return $response->withJson([
            'status' => 'success',
            'data' => $items,
        ]);
    }

    public function store(Request $request, Response $response): Response
    {
        if (($errorResponse = $this->validateRequest($request, Create{{controllerName}}Request::class, true)) instanceof Response) {
            return $errorResponse;
        }

        $validated = $this->validatedData($request, Create{{controllerName}}Request::class);
        $dto = new Create{{controllerName}}DTO(...$validated);

        $item = $this->createAction->execute($dto);

        return $response->withJson([
            'status' => 'success',
            'data' => $item,
        ], 201);
    }

    public function show(Request $request, Response $response, array $args): Response
    {
        $item = $this->getAction->execute($this->getParamAsInt($args, 'id'));

        return $response->withJson([
            'status' => 'success',
            'data' => $item,
        ]);
    }

    public function update(Request $request, Response $response, array $args): Response
    {
        if (($errorResponse = $this->validateRequest($request, Update{{controllerName}}Request::class, true)) instanceof Response) {
            return $errorResponse;
        }

        $validated = $this->validatedData($request, Update{{controllerName}}Request::class);
        $dto = new Update{{controllerName}}DTO(
            $this->getParamAsInt($args, 'id'),
            ...$validated,
        );

        $item = $this->updateAction->execute($dto);

        return $response->withJson([
            'status' => 'success',
            'data' => $item,
        ]);
    }

    public function destroy(Request $request, Response $response, array $args): Response
    {
        $this->deleteAction->execute($this->getParamAsInt($args, 'id'));

        return $response->withJson([
            'status' => 'success',
            'message' => '{{controllerName}} deleted successfully',
        ]);
    }
}
